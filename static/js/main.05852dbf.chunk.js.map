{"version":3,"sources":["components/ScoreboardCharacter/index.js","components/Scoreboard/index.js","components/Board/index.js","components/Modal/index.js","components/ChooseAvatar/index.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreboardCharacter","name","icon","score","className","Scoreboard","personOption","robotOption","personScore","robotScore","avatar","options","pedra","papel","tesoura","Board","useState","firstPlayerOption","setFirstPlayerOption","setRobotOption","firstPlayerScore","setFirstPlayerScore","setRobotScore","setOption","firstPlayer","robot","Math","floor","random","length","option","console","log","onClickReset","onClick","alert","ModalBackground","open","setOpen","children","e","stopPropagation","ChooseAvatar","openModal","setOpenModal","setPlay","setAvatar","setName","showPicker","setShowPicker","value","onChange","target","placeholder","showSkinTones","set","showPreview","color","exclude","search","onSelect","event","native","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05852dbf.chunk.js","sourcesContent":["import \"./styles.scss\";\r\n\r\nexport function ScoreboardCharacter({ name, icon, score = 0 }) {\r\n  return (\r\n    <div className=\"scoreboard-char\">\r\n      <p>{name}:</p>\r\n      <p className=\"scoreboard-char-points\">{score}</p>\r\n      <span>{icon}</span>\r\n    </div>\r\n  );\r\n}\r\n","import { ScoreboardCharacter } from \"../ScoreboardCharacter\";\r\nimport \"./styles.scss\";\r\n\r\nexport function Scoreboard({\r\n  personOption,\r\n  robotOption,\r\n  personScore,\r\n  robotScore,\r\n  name,\r\n  avatar,\r\n}) {\r\n  const options = { pedra: \"âœŠ\", papel: \"ðŸ¤š\", tesoura: \"âœŒ\" };\r\n\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <ScoreboardCharacter\r\n        name={name ? name : \"VocÃª\"}\r\n        score={personScore}\r\n        icon={personOption ? options[personOption] : avatar}\r\n      />\r\n      <ScoreboardCharacter\r\n        name=\"Computador\"\r\n        score={robotScore}\r\n        icon={robotOption ? options[robotOption] : \"ðŸ‘¾\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Scoreboard } from \"../Scoreboard\";\r\n\r\nexport function Board({ name, avatar }) {\r\n  const options = [\"pedra\", \"papel\", \"tesoura\"];\r\n\r\n  const [firstPlayerOption, setFirstPlayerOption] = useState(\"\");\r\n  const [robotOption, setRobotOption] = useState(\"\");\r\n\r\n  const [firstPlayerScore, setFirstPlayerScore] = useState(0);\r\n  const [robotScore, setRobotScore] = useState(0);\r\n\r\n  function setOption(firstPlayer) {\r\n    const robot = Math.floor(Math.random() * options.length);\r\n\r\n    const option = options[robot];\r\n\r\n    if (option && firstPlayer) {\r\n      if (option === firstPlayer) {\r\n        console.log(\"empate\");\r\n      } else if (option === \"pedra\" && firstPlayer === \"tesoura\") {\r\n        setRobotScore(robotScore + 1);\r\n      } else if (option === \"tesoura\" && firstPlayer === \"papel\") {\r\n        setRobotScore(robotScore + 1);\r\n      } else if (option === \"papel\" && firstPlayer === \"pedra\") {\r\n        setRobotScore(robotScore + 1);\r\n      } else {\r\n        setFirstPlayerScore(firstPlayerScore + 1);\r\n      }\r\n    }\r\n\r\n    setRobotOption(options[robot]);\r\n    setFirstPlayerOption(firstPlayer);\r\n  }\r\n\r\n  function onClickReset() {\r\n    setFirstPlayerOption(\"\");\r\n    setRobotScore(0);\r\n    setFirstPlayerScore(0);\r\n    setRobotOption(\"\");\r\n  }\r\n\r\n  function onClickFinish() {\r\n    if (firstPlayerScore > robotScore) {\r\n      alert(\"VocÃª venceu ðŸŽ‰\");\r\n    } else if (firstPlayerScore < robotScore) {\r\n      alert(\"O computador venceu vocÃª ðŸ˜¯\");\r\n    } else {\r\n      alert(\"Empatou ðŸ˜¢\");\r\n    }\r\n\r\n    onClickReset();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board\">\r\n        <h1>Pedra, papel, tesoura!</h1>\r\n\r\n        <h4>Escolha a sua jogada</h4>\r\n\r\n        <div className=\"board-options\">\r\n          <button onClick={() => setOption(options[0])}>âœŠ</button>\r\n          <button onClick={() => setOption(options[1])}>âœ‹</button>\r\n          <button onClick={() => setOption(options[2])}>âœŒ</button>\r\n        </div>\r\n\r\n        <Scoreboard\r\n          personOption={firstPlayerOption}\r\n          robotOption={robotOption}\r\n          personScore={firstPlayerScore}\r\n          robotScore={robotScore}\r\n          name={name}\r\n          avatar={avatar}\r\n        />\r\n      </div>\r\n      <div className=\"board-button-commands\">\r\n        <button onClick={onClickReset} className=\"button-reset\">\r\n          Resetar\r\n        </button>\r\n        <button onClick={onClickFinish}>Finalizar partida</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nexport function ModalBackground({ open, setOpen, children }) {\r\n  return (\r\n    <div\r\n      className={`modal-overlay ${open ? \"open\" : \"close\"}`}\r\n      onClick={setOpen}\r\n    >\r\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Picker } from \"emoji-mart\";\r\nimport { useState } from \"react\";\r\nimport { ModalBackground } from \"../Modal\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nexport function ChooseAvatar({\r\n  openModal,\r\n  setOpenModal,\r\n  setPlay,\r\n  avatar,\r\n  setAvatar,\r\n  name,\r\n  setName,\r\n}) {\r\n  const [showPicker, setShowPicker] = useState(false);\r\n\r\n  return (\r\n    <ModalBackground open={openModal} setOpen={setOpenModal}>\r\n      <div className=\"choose-avatar\">\r\n        <h4>InformaÃ§Ãµes do jogador</h4>\r\n\r\n        <input\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          className=\"choose-avatar-input\"\r\n          placeholder=\"Qual seu nome?\"\r\n        />\r\n\r\n        <button\r\n          className=\"choose-avatar-button\"\r\n          onClick={() => setShowPicker(!showPicker)}\r\n        >\r\n          {avatar}\r\n        </button>\r\n\r\n        {showPicker ? (\r\n          <div className=\"choose-avatar-picker\">\r\n            <Picker\r\n              showSkinTones={false}\r\n              set=\"twitter\"\r\n              showPreview={false}\r\n              color=\"#0351BD\"\r\n              exclude={[\"flags\", \"recent\"]}\r\n              search={false}\r\n              onSelect={(event) => setAvatar(event.native)}\r\n            />\r\n          </div>\r\n        ) : null}\r\n\r\n        <button className=\"play\" onClick={setPlay}>\r\n          Play\r\n        </button>\r\n      </div>\r\n    </ModalBackground>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Board } from \"./components/Board\";\r\nimport { ChooseAvatar } from \"./components/ChooseAvatar\";\r\n\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\n\r\nfunction App() {\r\n  const [open, setOpen] = useState(true);\r\n  const [avatar, setAvatar] = useState(\"ðŸ˜ƒ\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Board name={name} avatar={avatar} />\r\n      <ChooseAvatar\r\n        name={name}\r\n        setName={setName}\r\n        avatar={avatar}\r\n        setAvatar={setAvatar}\r\n        openModal={open}\r\n        setOpen={() => setOpen(!open)}\r\n        setPlay={() => setOpen(!open)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/styles/global.scss\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}